# vim: set sw=4:sts=4:et:
- clean: ['~', '~/.*']
- shell:
    - description: Update submodules in dotfiles repo.
      command: |

        cd $HOME/dotfiles
        git submodule update --init --recursive

# ----- zsh -----
- clean: ['~/.zprezto/modules/prompt/functions']

- shell:
    - description: Clone zprezto from Github
      command: |

        if [ ! -d "${ZDOTDIR:-$HOME}/.zprezto" ]; then
            git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto";
                for rcfile in $(find "${ZDOTDIR:-$HOME}"/.zprezto/runcoms -not -path '*\.md' -type f); do
                ln -sf "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile##*/}";
            done
        fi

- link:
    ~/.zshrc:
        path: zsh/zshrc
        force: true
    ~/.zprofile:
        path: zsh/zprofile
        force: true
    ~/.zpreztorc:
        path: zsh/zpreztorc
        force: true
    ~/.zprezto/modules/prompt/functions/prompt_ayk_setup:
        path: zsh/zprezto/modules/prompt/functions/prompt_ayk_setup
        relink: true

- shell:
    - description: Linking OS specific zsh configs
      command: |

        for f in $(find "$HOME/dotfiles/zsh" -maxdepth 1 -type f | grep "zshrc.os"); do
            if uname | grep -iq "${f##*/zshrc.os.}"; then
                ln -sf "${f}" "$HOME/.zshrc.os";
                break;
            fi
        done

# ----- vim -----
- clean:
  - '~/.vim'
  - '~/.vim/colors'

- link:
    ~/.vimrc: vim/vimrc
    ~/.vim/vimrc_small:
        path: vim/vimrc_small
        craete: true
    ~/.vim/UltiSnips:
        path: vim/vim/UltiSnips
        craete: true
    ~/.vim/ycm_extra_conf.py:
        path: vim/vim/ycm_extra_conf.py
        create: true
    ~/.vim/colors/hybrid-ayk.vim:
        path: vim/vim/colors/hybrid-ayk.vim
        create: true

- shell:
    - description: Clone YouCompleteMe
      command: |

        if [ -d ~/.vim/bundle/YouCompleteMe ]; then
            exit 0
        fi
        echo -n "Clone YouCompleteMe? [y|N] " > /dev/tty
        read choice < /dev/tty
        case "$choice" in
            y|Y )
                if [ ! -d ~/.vim/bundle ]; then
                    mkdir -p ~/.vim/bundle
                fi
                git clone --recursive \
                    https://github.com/Valloric/YouCompleteMe.git \
                    ~/.vim/bundle/YouCompleteMe \
                    > /dev/tty 2>&1;;
        esac

- shell:
    - description: Build YouCompleteMe
      command: |

        if [ ! -d ~/.vim/bundle/YouCompleteMe ] || \
            [ -f ~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycm_core.so ]; then
            exit 0
        fi

        echo -n "Build YouCompleteMe? (May require additional packages) [y|N] " > /dev/tty
        read choice < /dev/tty
        case "$choice" in
            y|Y )
                break;;
            * )
                exit 0;;
        esac

        os=$(uname)
        if echo "${os}" | grep -iq "darwin"; then
            echo "Installing cmake with brew." > /dev/tty
            brew install cmake > /dev/tty 2>&1
        elif echo "${os}" | grep -iq "linux"; then
            echo "Installing required packages: build-essential cmake python-dev" > /dev/tty
                sudo apt-get install build-essential cmake python-dev < /dev/tty > /dev/tty 2>&1
        else
            echo "Unknown OS: ${os}. Attempting to build anyway." > /dev/tty
        fi
        if [ $? -ne 0 ]; then
            exit 1
        fi

        echo -n "Enter build options (default: --clang-completer --gocode-completer). Give a space for no args.\n> " > /dev/tty
        read options < /dev/tty
        if [ -n "${options}" ]; then
            options="--clang-completer --gocode-completer"
        fi
        cd ~/.vim/bundle/YouCompleteMe
        eval "./install.py ${options} > /dev/tty 2>&1"

- shell:
    - description: Link neovim to vim
      command: |

        mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
        ln -sf ~/.vim $XDG_CONFIG_HOME/nvim
        ln -sf ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim


# ----- git -----
- link:
    ~/.gitconfig: git/gitconfig
    ~/.gitconfig.user: git/gitconfig.user
    ~/.gitignore_global: git/gitignore_global

- shell:
    - description: Linking os specific git configs
      command: |

        for f in $(find "$HOME/dotfiles/git" -maxdepth 1 -type f | grep "gitconfig.os"); do
            if uname | grep -iq "${f##*/gitconfig.os.}"; then
                ln -sf "${f}" "$HOME/.gitconfig.os";
                break;
            fi
        done


# ----- tmux -----
- link:
    ~/.tmux.conf: tmux/tmux.conf


# ----- virtualenv -----
- clean: ['~/.pyvirtualenvs']
- link:
    ~/.pyvirtualenvs/postactivate:
        force: true
        path: virtualenv/postactivate
        create: true
    ~/.pyvirtualenvs/postdeactivate:
        force: true
        path: virtualenv/postdeactivate
        create: true
